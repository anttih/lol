
(define (take-while-consume pred l)
  (let more ((c "")
             (l l))
    (if (null? l)
      (list c l)
      (let ((next (car l)))
        (if (pred next)
          (more (conc c next)
                (cdr l))
          (list c l))))))

(define (read-number l)
  (let* ((token (take-while-consume char-numeric? l))
        (num (car token))
        (rest (cadr token)))
    (list (string->number num) rest)))

(define (open-paren? c)
  (eq? c #\())

(define (close-paren? c)
  (eq? c #\)))

(define (append-token tokens token)
  (append tokens (list token)))

(define (tokenize s)
    (let next ((done '())
               (rest (string->list s)))
      (cond ((null? rest) done)
            ((char-whitespace? (car rest))
             (next done (cdr rest)))
            ((char-numeric? (car rest))
             (let ((token (read-number rest)))
               (next (append-token done (list 'number (car token)))
                     (cadr token))))
            ((open-paren? (car rest))
             (next (append-token done '(open-paren))
                   (cdr rest)))
            ((close-paren? (car rest))
             (next (append-token done '(close-paren))
                   (cdr rest)))
            (else (print "Malformed expression")))))

(define (parse-next res tokens)
  (if (null? tokens)
    (list res tokens)
    (let ((next (car tokens)))
      (case (car next)
            ((open-paren) 
             (let ((parsed (parse-next '() (cdr tokens))))
               (parse-next (append res (list (car parsed)))
                           (cadr parsed))))
            ((close-paren)
             (list res (cdr tokens)))
            ((number)
             (parse-next (append res (list (cadr next)))
                         (cdr tokens)))
            (else "Unrecognized token")))))

(define (parse tokens)
  (car (parse-next '() tokens)))

(define (read- sexpr)
  (parse (tokenize sexpr)))
